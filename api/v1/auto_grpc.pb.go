// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: auto.proto

package dolk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Dolk_Create_FullMethodName = "/dolk.Dolk/Create"
)

// DolkClient is the client API for Dolk service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DolkClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
}

type dolkClient struct {
	cc grpc.ClientConnInterface
}

func NewDolkClient(cc grpc.ClientConnInterface) DolkClient {
	return &dolkClient{cc}
}

func (c *dolkClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, Dolk_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DolkServer is the server API for Dolk service.
// All implementations must embed UnimplementedDolkServer
// for forward compatibility
type DolkServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	mustEmbedUnimplementedDolkServer()
}

// UnimplementedDolkServer must be embedded to have forward compatible implementations.
type UnimplementedDolkServer struct {
}

func (UnimplementedDolkServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDolkServer) mustEmbedUnimplementedDolkServer() {}

// UnsafeDolkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DolkServer will
// result in compilation errors.
type UnsafeDolkServer interface {
	mustEmbedUnimplementedDolkServer()
}

func RegisterDolkServer(s grpc.ServiceRegistrar, srv DolkServer) {
	s.RegisterService(&Dolk_ServiceDesc, srv)
}

func _Dolk_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DolkServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dolk_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DolkServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dolk_ServiceDesc is the grpc.ServiceDesc for Dolk service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dolk_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dolk.Dolk",
	HandlerType: (*DolkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Dolk_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auto.proto",
}
